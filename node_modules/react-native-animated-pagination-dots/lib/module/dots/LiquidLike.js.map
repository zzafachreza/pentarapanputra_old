{"version":3,"sources":["LiquidLike.tsx"],"names":["React","Animated","StyleSheet","useWindowDimensions","View","Line","Svg","AnimatedLine","createAnimatedComponent","AnimatedSvg","LiquidLike","scrollX","data","dotSize","marginHorizontal","inActiveDotOpacity","inActiveDotColor","activeDotColor","containerStyle","scrollOffset","wormDot","bigHead","strokeWidth","bigHeadScale","width","defaultProps","inputRange","translateBack","useRef","Value","current","timing","toValue","interpolate","outputRange","duration","useNativeDriver","start","translateFront","styles","map","_item","index","opacity","height","borderRadius","backgroundColor","svg","transform","translateX","scale","modulo","divide","create","flexDirection","position"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  useWindowDimensions,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport { Line, Svg } from 'react-native-svg';\nexport interface LiquidLikeProps {\n  data: Array<Object>;\n  scrollX: Animated.Value;\n  scrollOffset: Animated.Value;\n  containerStyle?: ViewStyle;\n  dotSize?: number;\n  marginHorizontal?: number;\n  inActiveDotOpacity?: number;\n  inActiveDotColor?: string;\n  activeDotColor?: string;\n  wormDot?: boolean;\n  strokeWidth?: number;\n  bigHead?: boolean;\n  bigHeadScale?: number;\n}\n\nconst AnimatedLine = Animated.createAnimatedComponent(Line);\nconst AnimatedSvg = Animated.createAnimatedComponent(Svg);\nconst LiquidLike = ({\n  scrollX,\n  data,\n  dotSize,\n  marginHorizontal,\n  inActiveDotOpacity,\n  inActiveDotColor,\n  activeDotColor,\n  containerStyle,\n  scrollOffset,\n  wormDot,\n  bigHead,\n  strokeWidth,\n  bigHeadScale,\n}: LiquidLikeProps) => {\n  const { width } = useWindowDimensions();\n\n  const defaultProps = {\n    dotSize: dotSize || 12,\n    marginHorizontal: marginHorizontal || 6,\n    inActiveDotOpacity: inActiveDotOpacity || 0.5,\n    inActiveDotColor: inActiveDotColor || '#000',\n    activeDotColor: activeDotColor || '#fff',\n    wormDot: wormDot || false,\n    bigHead: bigHead || false,\n    strokeWidth: strokeWidth || 8,\n    bigHeadScale: bigHeadScale || 1,\n  };\n  const inputRange = [0, width, width * 2];\n  const translateBack = React.useRef(new Animated.Value(0)).current;\n  Animated.timing(translateBack, {\n    toValue: scrollOffset.interpolate({\n      inputRange: [0, width],\n      outputRange: [\n        defaultProps.dotSize / 2,\n        defaultProps.dotSize +\n          defaultProps.marginHorizontal +\n          (defaultProps.marginHorizontal + defaultProps.dotSize / 2),\n      ],\n    }),\n    duration: 100,\n    useNativeDriver: true,\n  }).start();\n  const translateFront = scrollX.interpolate({\n    inputRange,\n    outputRange: [\n      defaultProps.dotSize / 2,\n      defaultProps.dotSize +\n        defaultProps.marginHorizontal * 2 +\n        defaultProps.dotSize / 2,\n      (defaultProps.dotSize + defaultProps.marginHorizontal * 2) * 2 +\n        defaultProps.dotSize / 2,\n    ],\n  });\n  return (\n    <View style={[styles.containerStyle, containerStyle]}>\n      {data.map((_item, index) => {\n        return (\n          <View\n            key={index}\n            style={{\n              opacity: defaultProps.inActiveDotOpacity,\n              width: defaultProps.dotSize,\n              height: defaultProps.dotSize,\n              borderRadius: defaultProps.dotSize / 2,\n              marginHorizontal: defaultProps.marginHorizontal,\n              backgroundColor: defaultProps.inActiveDotColor,\n            }}\n          />\n        );\n      })}\n      {!wormDot ? (\n        <Animated.View\n          style={[\n            {\n              width: defaultProps.dotSize,\n              height: defaultProps.dotSize,\n              marginHorizontal: defaultProps.marginHorizontal,\n              backgroundColor: defaultProps.activeDotColor,\n              borderRadius: defaultProps.dotSize,\n            },\n            styles.svg,\n            {\n              transform: [\n                {\n                  translateX: scrollX.interpolate({\n                    inputRange,\n                    outputRange: [\n                      0,\n                      defaultProps.dotSize + defaultProps.marginHorizontal * 2,\n                      (defaultProps.dotSize +\n                        defaultProps.marginHorizontal * 2) *\n                        2,\n                    ],\n                  }),\n                },\n                !bigHead\n                  ? {\n                      scale: Animated.modulo(\n                        Animated.modulo(Animated.divide(scrollX, width), width),\n                        1\n                      ).interpolate({\n                        inputRange: [0, 0.1, 0.9, 1],\n                        outputRange: [1, 0, 0, 1],\n                      }),\n                    }\n                  : {\n                      scale: defaultProps.bigHeadScale,\n                    },\n              ],\n            },\n          ]}\n        />\n      ) : null}\n\n      <AnimatedSvg style={styles.svg}>\n        <AnimatedLine\n          x1={translateFront}\n          y1={defaultProps.dotSize / 2}\n          x2={translateBack}\n          y2={defaultProps.dotSize / 2}\n          stroke={defaultProps.activeDotColor}\n          strokeWidth={defaultProps.strokeWidth}\n          strokeLinecap=\"round\"\n          translateX={defaultProps.marginHorizontal}\n        />\n      </AnimatedSvg>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  containerStyle: {\n    flexDirection: 'row',\n  },\n  svg: {\n    position: 'absolute',\n  },\n});\n\nexport default LiquidLike;\n"]}