{"version":3,"sources":["ExpandingDot.tsx"],"names":["React","Animated","StyleSheet","useWindowDimensions","View","ExpandingDot","scrollX","data","dotStyle","containerStyle","inActiveDotOpacity","inActiveDotColor","expandingDotWidth","activeDotColor","width","defaultProps","dotWidth","styles","map","_","index","inputRange","colour","interpolate","outputRange","extrapolate","opacity","expand","backgroundColor","create","position","bottom","flexDirection","alignSelf","height","borderRadius","marginHorizontal"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  useWindowDimensions,\n  View,\n  ViewStyle,\n} from 'react-native';\nexport interface ExpandingDotProps {\n  data: Array<Object>;\n  scrollX: Animated.Value;\n  containerStyle: ViewStyle;\n  dotStyle: ViewStyle;\n  inActiveDotOpacity?: number;\n  inActiveDotColor?: string;\n  expandingDotWidth?: number;\n  activeDotColor?: string;\n}\n\nconst ExpandingDot = ({\n  scrollX,\n  data,\n  dotStyle,\n  containerStyle,\n  inActiveDotOpacity,\n  inActiveDotColor,\n  expandingDotWidth,\n  activeDotColor,\n}: ExpandingDotProps) => {\n  const { width } = useWindowDimensions();\n\n  const defaultProps = {\n    inActiveDotColor: inActiveDotColor || '#000',\n    inActiveDotOpacity: inActiveDotOpacity || 0.5,\n    expandingDotWidth: expandingDotWidth || 20,\n    dotWidth: (dotStyle.width as number) || 10,\n    activeDotColor: activeDotColor || '#347af0',\n  };\n\n  return (\n    <View style={[styles.containerStyle, containerStyle]}>\n      {data.map((_, index) => {\n        const inputRange = [\n          (index - 1) * width,\n          index * width,\n          (index + 1) * width,\n        ];\n\n        const colour = scrollX.interpolate({\n          inputRange,\n          outputRange: [\n            defaultProps.inActiveDotColor,\n            defaultProps.activeDotColor,\n            defaultProps.inActiveDotColor,\n          ],\n          extrapolate: 'clamp',\n        });\n        const opacity = scrollX.interpolate({\n          inputRange,\n          outputRange: [\n            defaultProps.inActiveDotOpacity,\n            1,\n            defaultProps.inActiveDotOpacity,\n          ],\n          extrapolate: 'clamp',\n        });\n        const expand = scrollX.interpolate({\n          inputRange,\n          outputRange: [\n            defaultProps.dotWidth,\n            defaultProps.expandingDotWidth,\n            defaultProps.dotWidth,\n          ],\n          extrapolate: 'clamp',\n        });\n\n        return (\n          <Animated.View\n            key={`dot-${index}`}\n            style={[\n              styles.dotStyle,\n              dotStyle,\n              { width: expand },\n              { opacity },\n              { backgroundColor: colour },\n            ]}\n          />\n        );\n      })}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  containerStyle: {\n    position: 'absolute',\n    bottom: 20,\n    flexDirection: 'row',\n    alignSelf: 'center',\n  },\n  dotStyle: {\n    width: 10,\n    height: 10,\n    borderRadius: 5,\n    marginHorizontal: 5,\n  },\n});\n\nexport default ExpandingDot;\n"]}